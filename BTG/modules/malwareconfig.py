#!/usr/bin/python
# -*- coding: utf-8 -*-
# Copyright (c) 2017 Conix Cybersecurity
# Copyright (c) 2018 Tanguy Becam
#
# This file is part of BTG.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, see <http://www.gnu.org/licenses/>.

import requests
import json
from lib.io import module as mod
from random import choice, randint
import time

class malwareconfig():
    """
        This module performs a Safe Browsing Lookup to Google API
    """
    def __init__(self, ioc, type, config):
        self.config = config
        self.module_name = __name__.split(".")[1]
        self.types = ["MD5", "SHA256"]
        self.search_method = "Online"
        self.description = "Search IOC in MalwareConfig database"
        self.author = "Conix"
        self.creation_date = "31-05-2018"
        self.type = type.lower()
        self.ioc = ioc

        if type in self.types and mod.allowedToSearch(self.search_method):
            self.search()
        else:
            mod.display(self.module_name, "", "INFO", "malwareconfig module not activated")
            return None

    def search(self):
        mod.display(self.module_name, "", "INFO", "Search in MalwareConfig ...")

        try:
            if 'malwareconfig_api_keys' in self.config:
                api_key = choice(self.config['malwareconfig_api_keys'])
            else:
                mod.display(self.module_name,
                            message_type="ERROR",
                            string="Check if you have malwareconfig_api_keys field in config.ini")
        except:
            mod.display(self.module_name, self.ioc, "ERROR", "Please provide your MalwareConfig API key.")
            return None

        # TODO
        # API is broken on May,31st,2018 so we do some web page search instead
        # API - POST request is commented below
        # request_url = "https://malwareconfig.com/api/file/config"
        response_url = "https://malwareconfig.com/config/"

        # payload = {'apikey':api_key,
        #            'hashes':self.ioc
        #           }
        # json_payload = json.dumps(payload)
        # response = requests.post(request_url, data=json_payload)
        response = requests.get(response_url+self.ioc)

        if response.status_code == 200:
            if response.text.find("There doesnt seem to be anything here.") != -1:
                mod.display(self.module_name,
                            self.ioc,
                            "INFO",
                            "Nothing found in MalwareConfig")
                return None
            else:
                mod.display(self.module_name,
                            self.ioc,
                            "FOUND",
                            response_url+self.ioc)
                return None
        else:
            mod.display(self.module_name,
                        self.ioc,
                        message_type="ERROR",
                        string="MalwareConfig API connection status %d" % response.status_code)
            return None

        # if response.status_code == 200:
        #     try :
        #         json_response = json.loads(response.text)
        #     except :
        #         mod.display(self.module_name,
        #                     self.ioc,
        #                     message_type="WARNING",
        #                     string="MalwareConfig json_response was not readable.")
        #         return None
        #
        #     if json_response['response'] != 200:
        #         mod.display(self.module_name,
        #                     self.ioc,
        #                     message_type="ERROR",
        #                     string="MalwareConfig API connection status %s" % json_response['response'])
        #         return None
        # else:
        #     mod.display(self.module_name,
        #                 self.ioc,
        #                 message_type="ERROR",
        #                 string="MalwareConfig API connection status %d" % response.status_code)
        #     return None
        #
        # try:
        #     if json_response['count'] > 0:
        #         mod.display(self.module_name,
        #                     self.ioc,
        #                     "FOUND",
        #                     response_url+self.ioc)
        #     else:
        #         mod.display(self.module_name,
        #                     self.ioc,
        #                     "INFO",
        #                     "Nothing found in MalwareConfig")
        # except:
        #     return None
